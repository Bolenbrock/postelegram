// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
bot.onText(/\/start/, async (msg) => {
    const chatId = msg.chat.id;

    const mailboxKeyboard = {
        reply_markup: {
            inline_keyboard: Object.keys(mailboxes).map(key => [
                { text: mailboxes[key].name, callback_data: `check_${key}` }
            ])
        }
    };

    await bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—á—Ç–æ–≤—ã–π —è—â–∏–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:', mailboxKeyboard);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏
bot.on('callback_query', async (query) => {
    const chatId = query.message.chat.id;
    const data = query.data;

    if (data.startsWith('check_')) {
        const mailboxKey = data.split('_')[1];
        const selectedMailbox = mailboxes[mailboxKey];

        if (!selectedMailbox) {
            await bot.sendMessage(chatId, '–û—à–∏–±–∫–∞: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ—á—Ç–æ–≤—ã–π —è—â–∏–∫.');
            return;
        }

        await checkUnreadEmails(chatId, selectedMailbox, mailboxKey);
        await bot.answerCallbackQuery(query.id);
    }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –ø–∏—Å–µ–º
async function checkUnreadEmails(chatId, mailbox, mailboxKey) {
    try {
        const gmail = createGmailClient(mailbox);

        const response = await gmail.users.messages.list({
            userId: 'me',
            q: 'is:unread',
        });

        const unreadMessages = response.data.messages;

        if (!unreadMessages || unreadMessages.length === 0) {
            await bot.sendMessage(chatId, `–£ –≤–∞—Å –Ω–µ—Ç –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –ø–∏—Å–µ–º –≤ ${mailbox.name}.`);
            return;
        }

        await bot.sendMessage(chatId, `–£ –≤–∞—Å ${unreadMessages.length} –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –ø–∏—Å–µ–º –≤ ${mailbox.name}.`);

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –∏–ª–∏ —ç–º–æ–¥–∑–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —è—â–∏–∫–∞
        const mailboxPrefix = {
            mailbox1: 'üîµ', // –°–∏–Ω–∏–π –∫—Ä—É–∂–æ–∫ –¥–ª—è mailbox1
            mailbox2: 'üî¥', // –ö—Ä–∞—Å–Ω—ã–π –∫—Ä—É–∂–æ–∫ –¥–ª—è mailbox2
        };

        const prefix = mailboxPrefix[mailboxKey] || 'üìß'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º —ç–º–æ–¥–∑–∏ –ø–∏—Å—å–º–∞

        for (const message of unreadMessages) {
            try {
                const email = await gmail.users.messages.get({
                    userId: 'me',
                    id: message.id,
                    format: 'metadata',
                    metadataHeaders: ['Subject', 'From', 'Date'],
                });

                const headers = email.data.payload.headers;
                const subjectHeader = headers.find(header => header.name === 'Subject');
                const fromHeader = headers.find(header => header.name === 'From');
                const dateHeader = headers.find(header => header.name === 'Date');

                const subject = subjectHeader ? subjectHeader.value : '–ë–µ–∑ —Ç–µ–º—ã';
                const from = fromHeader ? fromHeader.value : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å';
                const date = dateHeader ? dateHeader.value : '–î–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞';

                await bot.sendMessage(
                    chatId,
                    `${prefix} **–û—Ç:** ${from}\n**–¢–µ–º–∞:** ${subject}\n**–î–∞—Ç–∞:** ${date}`
                );
            } catch (e) {
                console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–∏—Å—å–º–∞:', e);
                await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–∏—Å—å–º–∞.');
            }
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—á—Ç—ã:', error);
        await bot.sendMessage(chatId, `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–∏—Å–µ–º –¥–ª—è ${mailbox.name}.`);
    }
}
