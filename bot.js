import TelegramBot from 'node-telegram-bot-api';
import { google } from 'googleapis';

const botToken = process.env.TELEGRAM_BOT_TOKEN;
const bot = new TelegramBot(botToken, { polling: true });

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—á—Ç–æ–≤—ã—Ö —è—â–∏–∫–æ–≤
const mailboxes = {
    mailbox1: {
        name: "aristosand",
        gmailClientId: process.env.GMAIL_CLIENT_ID,
        gmailClientSecret: process.env.GMAIL_CLIENT_SECRET,
        gmailRefreshToken: process.env.GMAIL_REFRESH_TOKEN,
        emoji: "üî¥" // –î–æ–±–∞–≤–ª–µ–Ω —ç–º–æ–¥–∑–∏ –¥–ª—è mailbox1
    },
    mailbox2: {
        name: "legalacefor",
        gmailClientId: process.env.GMAIL_CLIENT_ID_2,
        gmailClientSecret: process.env.GMAIL_CLIENT_SECRET_2,
        gmailRefreshToken: process.env.GMAIL_REFRESH_TOKEN_2,
        emoji: "üîµ" // –î–æ–±–∞–≤–ª–µ–Ω —ç–º–æ–¥–∑–∏ –¥–ª—è mailbox2
    }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è Gmail –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ—á—Ç–æ–≤–æ–≥–æ —è—â–∏–∫–∞
const createGmailClient = (mailbox) => {
    const oauth2Client = new google.auth.OAuth2(
        mailbox.gmailClientId,
        mailbox.gmailClientSecret
    );
    oauth2Client.setCredentials({
        refresh_token: mailbox.gmailRefreshToken,
    });
    return google.gmail({ version: 'v1', auth: oauth2Client });
};

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
bot.onText(/\/start/, async (msg) => {
    const chatId = msg.chat.id;
    console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${msg.from.username} (${chatId}) –∑–∞–ø—É—Å—Ç–∏–ª –∫–æ–º–∞–Ω–¥—É /start`);
    const mailboxKeyboard = {
        reply_markup: {
            inline_keyboard: Object.keys(mailboxes).map(key => [
                { text: `${mailboxes[key].emoji} ${mailboxes[key].name}`, callback_data: `check_${key}` } // –î–æ–±–∞–≤–ª–µ–Ω —ç–º–æ–¥–∑–∏ –∫ —Ç–µ–∫—Å—Ç—É –∫–Ω–æ–ø–∫–∏
            ])
        }
    };
    await bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—á—Ç–æ–≤—ã–π —è—â–∏–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:', mailboxKeyboard);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏
bot.on('callback_query', async (query) => {
    const chatId = query.message.chat.id;
    const data = query.data;

    if (data.startsWith('check_')) {
        const mailboxKey = data.split('_')[1];
        const selectedMailbox = mailboxes[mailboxKey];
        if (!selectedMailbox) {
            console.error('–û—à–∏–±–∫–∞: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ—á—Ç–æ–≤—ã–π —è—â–∏–∫.');
            await bot.sendMessage(chatId, '–û—à–∏–±–∫–∞: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ—á—Ç–æ–≤—ã–π —è—â–∏–∫.');
            return;
        }
        console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ—á—Ç—ã –¥–ª—è —è—â–∏–∫–∞ ${selectedMailbox.name}`);
        await checkUnreadEmails(chatId, selectedMailbox);
        await bot.answerCallbackQuery(query.id);
    } else if (data.startsWith('delete_')) {
        const messageId = data.split('_')[1];
        const mailboxKey = data.split('_')[2];
        const selectedMailbox = mailboxes[mailboxKey];
        if (!selectedMailbox) {
            console.error('–û—à–∏–±–∫–∞: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ—á—Ç–æ–≤—ã–π —è—â–∏–∫.');
            await bot.sendMessage(chatId, '–û—à–∏–±–∫–∞: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ—á—Ç–æ–≤—ã–π —è—â–∏–∫.');
            return;
        }
        try {
            console.log(`–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è ${messageId} –∏–∑ —è—â–∏–∫–∞ ${selectedMailbox.name}`);
            await moveToTrash(messageId, selectedMailbox);
            console.log(`–°–æ–æ–±—â–µ–Ω–∏–µ ${messageId} —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É –∏–∑ —è—â–∏–∫–∞ ${selectedMailbox.name}`);
            await bot.answerCallbackQuery(query.id, '–ü–∏—Å—å–º–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É.');
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ –ø–∏—Å—å–º–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É:', error);
            await bot.answerCallbackQuery(query.id, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ –ø–∏—Å—å–º–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É.');
        }
    }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –ø–∏—Å–µ–º
async function checkUnreadEmails(chatId, mailbox) {
    try {
        const gmail = createGmailClient(mailbox);
        console.log(`–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –ø–∏—Å–µ–º –¥–ª—è —è—â–∏–∫–∞ ${mailbox.name}`);
        const response = await gmail.users.messages.list({
            userId: 'me',
            q: 'is:unread',
        });
        const unreadMessages = response.data.messages;
        if (!unreadMessages || unreadMessages.length === 0) {
            console.log(`–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –ø–∏—Å–µ–º –≤ —è—â–∏–∫–µ ${mailbox.name}`);
            await bot.sendMessage(chatId, `–£ –≤–∞—Å –Ω–µ—Ç –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –ø–∏—Å–µ–º –≤ ${mailbox.emoji} ${mailbox.name}.`); // –î–æ–±–∞–≤–ª–µ–Ω —ç–º–æ–¥–∑–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ
            return;
        }
        console.log(`–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–π–¥–µ–Ω–æ ${unreadMessages.length} –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –ø–∏—Å–µ–º –≤ —è—â–∏–∫–µ ${mailbox.name}`);
        await bot.sendMessage(chatId, `–£ –≤–∞—Å ${unreadMessages.length} –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –ø–∏—Å–µ–º –≤ ${mailbox.emoji} ${mailbox.name}.`); // –î–æ–±–∞–≤–ª–µ–Ω —ç–º–æ–¥–∑–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ

        for (const message of unreadMessages) {
            try {
                console.log(`–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å ID ${message.id} –∏–∑ —è—â–∏–∫–∞ ${mailbox.name}`);
                const email = await gmail.users.messages.get({
                    userId: 'me',
                    id: message.id,
                    format: 'metadata',
                    metadataHeaders: ['Subject', 'From', 'Date'],
                });
                const headers = email.data.payload.headers;
                const subjectHeader = headers.find(header => header.name === 'Subject');
                const fromHeader = headers.find(header => header.name === 'From');
                const dateHeader = headers.find(header => header.name === 'Date');
                const subject = subjectHeader ? subjectHeader.value : '–ë–µ–∑ —Ç–µ–º—ã';
                const from = fromHeader ? fromHeader.value : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å';
                const date = dateHeader ? dateHeader.value : '–î–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞';

                const keyboard = {
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: '–£–¥–∞–ª–∏—Ç—å', callback_data: `delete_${message.id}_${Object.keys(mailboxes).find(k => mailboxes[k] === mailbox)}` }]
                        ]
                    }
                };

                console.log(`–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø–∏—Å—å–º–µ —Å ID ${message.id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é`);
                await bot.sendMessage(
                    chatId,
                    `**–û—Ç:** ${from}\n**–¢–µ–º–∞:** ${subject}\n**–î–∞—Ç–∞:** ${date}`,
                    keyboard
                );
            } catch (e) {
                console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–∏—Å—å–º–∞:', e);
                await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–∏—Å—å–º–∞.');
            }
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—á—Ç—ã:', error);
        await bot.sendMessage(chatId, `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–∏—Å–µ–º –¥–ª—è ${mailbox.emoji} ${mailbox.name}.`); // –î–æ–±–∞–≤–ª–µ–Ω —ç–º–æ–¥–∑–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ
    }
}

// Help command
bot.onText(/\/help/, async (msg) => {
    const chatId = msg.chat.id;
    console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${msg.from.username} (${chatId}) –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–º–æ—â—å`);
    await bot.sendMessage(chatId,
        '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n' +
        '/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É'
    );
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –ø–∏—Å—å–º–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É
async function moveToTrash(messageId, mailbox) {
    const gmail = createGmailClient(mailbox);
    try {
        console.log(`–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è ${messageId} –≤ –∫–æ—Ä–∑–∏–Ω—É –∏–∑ —è—â–∏–∫–∞ ${mailbox.name}`);
        await gmail.users.messages.trash({
            userId: 'me',
            id: messageId,
        });
        console.log(`–°–æ–æ–±—â–µ–Ω–∏–µ ${messageId} —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É –∏–∑ —è—â–∏–∫–∞ ${mailbox.name}`);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ –ø–∏—Å—å–º–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É:', error);
        throw error; // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    }
}

console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...');
